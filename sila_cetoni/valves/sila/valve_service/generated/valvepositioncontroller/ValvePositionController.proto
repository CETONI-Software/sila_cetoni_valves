syntax = "proto3";

import "SiLAFramework.proto";

package sila2.de.cetoni.valves.valvepositioncontroller.v1;

/* Allows to specify a certain logical position for a valve. The Position property can be querried at any time to obtain the current valve position. */
service ValvePositionController {
  /* Switches the valve to the specified position. The given position has to be less than the NumberOfPositions or else a ValidationError is thrown. */
  rpc SwitchToPosition (sila2.de.cetoni.valves.valvepositioncontroller.v1.SwitchToPosition_Parameters) returns (sila2.de.cetoni.valves.valvepositioncontroller.v1.SwitchToPosition_Responses) {}
  /* This command only applies for 2-way valves to toggle between its two different positions. If the command is called for any other valve type a ValveNotToggleable error is thrown. */
  rpc TogglePosition (sila2.de.cetoni.valves.valvepositioncontroller.v1.TogglePosition_Parameters) returns (sila2.de.cetoni.valves.valvepositioncontroller.v1.TogglePosition_Responses) {}
  /* The number of the valve positions available. */
  rpc Get_NumberOfPositions (sila2.de.cetoni.valves.valvepositioncontroller.v1.Get_NumberOfPositions_Parameters) returns (sila2.de.cetoni.valves.valvepositioncontroller.v1.Get_NumberOfPositions_Responses) {}
  /* The current logical valve position. This is a value between 0 and NumberOfPositions - 1. */
  rpc Subscribe_Position (sila2.de.cetoni.valves.valvepositioncontroller.v1.Subscribe_Position_Parameters) returns (stream sila2.de.cetoni.valves.valvepositioncontroller.v1.Subscribe_Position_Responses) {}
}

/* Parameters for SwitchToPosition */
message SwitchToPosition_Parameters {
  sila2.org.silastandard.Integer Position = 1;  /* The target position that the valve should be switched to. */
}

/* Responses of SwitchToPosition */
message SwitchToPosition_Responses {
}

/* Parameters for TogglePosition */
message TogglePosition_Parameters {
}

/* Responses of TogglePosition */
message TogglePosition_Responses {
}

/* Parameters for NumberOfPositions */
message Get_NumberOfPositions_Parameters {
}

/* Responses of NumberOfPositions */
message Get_NumberOfPositions_Responses {
  sila2.org.silastandard.Integer NumberOfPositions = 1;  /* The number of the valve positions available. */
}

/* Parameters for Position */
message Subscribe_Position_Parameters {
}

/* Responses of Position */
message Subscribe_Position_Responses {
  sila2.org.silastandard.Integer Position = 1;  /* The current logical valve position. This is a value between 0 and NumberOfPositions - 1. */
}
